
## Installation
#This documentation provides instructions for setting up Jupiter hub.

#Set Up a GCP Account:
#If you haven't already, sign up for a GCP account at https://cloud.google.com/ and create a project.

#Enable Kubernetes Engine API:
#Go to the GCP Console, navigate to the Kubernetes Engine page, and enable the Kubernetes Engine API for your project.

#Install Google Cloud SDK:
#Install the Google Cloud SDK on your local machine. You can follow the instructions provided here: https://cloud.google.com/sdk/docs/install.

#Set Up gcloud CLI:
#Initialize gcloud by running gcloud init command and follow the instructions to authenticate and set the default project.

gcloud init

#Create a Kubernetes Cluster:
#Use the following command to create a Kubernetes cluster:

gcloud container clusters create taskcluster-ferry --num-nodes=3 --zone=asia-southeast1-a

#Configure kubectl:
#Run the following command to configure kubectl to use your newly created cluster:

gcloud container clusters get-credentials taskcluster-ferry --zone asia-southeast1-a



#Follow these steps to install Docker Desktop on your system:
#1. [Download Docker Desktop](https://www.docker.com/products/docker-desktop)
#2. Install Docker Desktop by following the on-screen instructions.

## Installing Jupyterhub
#Installing helm
#go to https://github.com/helm/helm/releases and get your desired version 
#You can verify that it is installed properly by running:

.\helm version

#Install Jupyterhub
## create helm repository

.\helm repo add jupyterhub https://hub.jupyter.org/helm-chart/
.\helm repo update

#verify the list

.\helm repo list

#verify the jupyterhub version and chart version

helm search repo jupyterhub

# get the value of the jupyterhub repository

.\helm.exe show values jupyterhub/jupyterhub >jupyterhub.yaml

# edit the jupyterhub.yaml file to match the configuration of the kubernates

# install jupyterhub with the value of yaml file

.\helm.exe install jupyterhub  jupyterhub/jupyterhub  --namespace jupyterhub2 --values config.yaml

# verify the insta process
 
 .\helm status jupyterhub
 
# get the ippublic to start working with jupyterhub, make sure the Load Balancer is running

kubectl get all

service/proxy-public   LoadBalancer   10.59.26.167   35.224.171.66   80:30870/TCP

#You can access jupyterhub via browser http://35.224.171.66

### Create jindo image docker

#download latest jindo https://github.com/aliyun/aliyun-emapreduce-datasources/tree/main/jars/datasources/latest

# create dockerfile and build image
#Use the Docker CLI to build the Docker image using the Dockerfile created in the previous step.

